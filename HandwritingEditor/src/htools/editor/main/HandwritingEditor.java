/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package htools.editor.main;

import htools.editor.matlabfunctions.MatlabMethods;
import htools.editor.UI.PanelEditor;
import htools.editor.UI.PanelEditorPopupMenu;
import htools.editor.UI.Player;
import htools.editor.UI.SplitPane;
import htools.editor.UI.UIPersistence;
import htools.editor.editor.Editor;
import htools.hollermap.manager.TraceManager;
import htools.core.traces.Trace;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.KeyStroke;

/**
 *
 * @author rvlander
 */
public class HandwritingEditor extends javax.swing.JFrame {

    private PanelEditor report;
    private Editor editor;
    private HandwritingEditor myframe;
    private String currentFile;
    private PanelEditorPopupMenu menu;
    private Player player;

    /**
     * Creates new form HandwritingEditor
     */
    public HandwritingEditor() {


        player = new Player(this);
        
        this.myframe = this;

        MatlabMethods.init();

        initComponents();
        editor = new Editor();
        menu = new PanelEditorPopupMenu(this);



        try {
            UIPersistence.loadUI(this, rootPanel, editor);
        } catch (Exception e) {
            System.err.println("error while reading UI conf");
            report = new PanelEditor(editor,menu);
            this.rootPanel.add(report, BorderLayout.CENTER);
        }
        
        
        
        if(new File(this.currentFile).exists()){
            this.setTitle("HandwritingEditor - " + this.getCurrentFile());
            this.loadTrace();
        }
        
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                try {
                    UIPersistence.saveUI(myframe, rootPanel);
                } catch (IOException ex) {
                    Logger.getLogger(HandwritingEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
                MatlabMethods.close();
                System.out.println("UI saved");

                System.exit(0);
            }
        });

    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rootPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuOpenTrace = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jMenuSaveAs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rootPanel.setLayout(new java.awt.BorderLayout());

        jMenu1.setText("File");

        jMenuOpenTrace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuOpenTrace.setText("Open ...");
        jMenuOpenTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenTraceActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOpenTrace);

        jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSave.setText("Save");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);

        jMenuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuSaveAs.setText("Save as ...");
        jMenuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSaveAs);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 886, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(rootPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(rootPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadTrace() {
        if (this.currentFile != null) {
            try {
                Trace T = Trace.read(new BufferedReader(new FileReader(this.currentFile)));
                editor.setWorkingTrace(T);
            } catch (IOException ex) {
                Logger.getLogger(HandwritingEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public String getCurrentFile() {
        return currentFile;
    }

    public void setCurrentFile(String currentFile) {
        this.currentFile = currentFile;
    }

    private void saveTrace() {
        if (this.currentFile != null) {
            TraceManager.exportTrace(this.currentFile, editor.getTrace());
        }
    }

    private void jMenuOpenTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenTraceActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.setCurrentDirectory(new File(this.getCurrentFile()).getParentFile());

        int returnVal = fc.showDialog(this, "Load");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.currentFile = file.getPath();
            this.setTitle("HandwritingEditor - " + this.getCurrentFile());
            this.loadTrace();

        } else {
            System.out.println("Open command cancelled by user.");
        }
    }//GEN-LAST:event_jMenuOpenTraceActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
        this.saveTrace();
    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveAsActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.setCurrentDirectory(new File(this.getCurrentFile()).getParentFile());

        int returnVal = fc.showDialog(this, "Save as ...");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.currentFile = file.getPath();
            this.setTitle("HandwritingEditor - " + this.getCurrentFile());
            this.saveTrace();

        } else {
            System.out.println("Save command cancelled by user.");
        }
    }//GEN-LAST:event_jMenuSaveAsActionPerformed

    public Editor getEditor() {
        return editor;
    }

    public PanelEditorPopupMenu getPopupMenu() {
        return menu;
    }
    
    public void play(){
        Component c = this.rootPanel.getComponent(0);
       // System.out.println(c.getClass().getName());
        if(c instanceof SplitPane){
            ((SplitPane)c).play(this.player);
        }else{
            ((PanelEditor)c).play(this.player);
        }
        player.play();
    }

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HandwritingEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HandwritingEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HandwritingEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HandwritingEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HandwritingEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuOpenTrace;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenuItem jMenuSaveAs;
    private javax.swing.JPanel rootPanel;
    // End of variables declaration//GEN-END:variables
}
