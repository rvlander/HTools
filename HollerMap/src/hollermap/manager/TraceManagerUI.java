/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hollermap.manager;

import hollermap.algorithms.TraceAnalyzer;
import hollermap.fusion.HollerMapConfigure;
import hollermap.fusion.InteractivePanel;
import htools.core.input.Options;
import hollermap.output.PDFreport;
import hollermap.output.PanelReport;
import java.awt.Component;
import java.io.*;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import hollermap.output.AnalyzerPlotter;

/**
 *
 * @author rvlander
 */
public class TraceManagerUI extends javax.swing.JFrame implements TraceManagerListener, ListSelectionListener {

    HollerMapConfigure hmc = new HollerMapConfigure();
    TraceManager tm;
    InteractivePanel ip;
    DefaultAnalyzersEditor dae;

    public TraceManagerUI(TraceManager tm, InteractivePanel ip) {
        this.tm = tm;

        dae = new DefaultAnalyzersEditor(tm);
        dae.updateTraceList();
        this.ip = ip;
        initComponents();
        this.setTitle("HollerMap");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelReport = new PanelReport();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        addAnalyzerButton = new javax.swing.JButton();
        jComboFigureSelection = new javax.swing.JComboBox();
        jComboFigureSelection.setModel(new DefaultComboBoxModel(new Object[]{}));
        jPanel5 = new javax.swing.JPanel();
        jStatusSelected = new javax.swing.JLabel();
        jStatusDrawn = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuLoad = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuHide = new javax.swing.JMenuItem();
        jMenuPlay = new javax.swing.JMenuItem();
        jMenuMode = new javax.swing.JMenuItem();
        jMenuRecording = new javax.swing.JMenuItem();
        jMenuSetBackground = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuExportTrace = new javax.swing.JMenuItem();
        jMenuExportSTrace = new javax.swing.JMenuItem();
        jMenuExportTraceFromStrace = new javax.swing.JMenuItem();
        jMenuExportSelected = new javax.swing.JMenuItem();
        jMenuExportAllTraces = new javax.swing.JMenuItem();
        jMenuAllSTraces = new javax.swing.JMenuItem();
        jMenuAllTracesFromSTraces = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuChangePlotMode = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuPDFReport = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuConfigureExportPath = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuStudiesName = new javax.swing.JMenuItem();
        jMenuRemoveSelectedTrace = new javax.swing.JMenuItem();
        jMenuRemoveSelectedAnalyzer = new javax.swing.JMenuItem();
        jMenuDefaultAnalyzers = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelReport.setPreferredSize(new java.awt.Dimension(192, 611));

        javax.swing.GroupLayout jPanelReportLayout = new javax.swing.GroupLayout(jPanelReport);
        jPanelReport.setLayout(jPanelReportLayout);
        jPanelReportLayout.setHorizontalGroup(
            jPanelReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 767, Short.MAX_VALUE)
        );
        jPanelReportLayout.setVerticalGroup(
            jPanelReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 703, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanelReport);

        jPanel1.setPreferredSize(new java.awt.Dimension(150, 611));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Analyzis"));

        jScrollPane2.setBorder(null);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(0, 0));

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.setListData(new Vector<TraceAnalyzer>());
        jList2.addListSelectionListener(this);
        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Traces"));

        jScrollPane1.setBorder(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(0, 0));

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setListData(tm.getVTS());
        jList1.addListSelectionListener(this);
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );

        addAnalyzerButton.setText("Add Analyzer");
        addAnalyzerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAnalyzerButtonActionPerformed(evt);
            }
        });

        jComboFigureSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboFigureSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboFigureSelectionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(addAnalyzerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
            .addComponent(jComboFigureSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAnalyzerButton)
                .addGap(18, 18, 18)
                .addComponent(jComboFigureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jStatusSelected.setText("   ");

        jStatusDrawn.setText("    ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jStatusSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                .addComponent(jStatusDrawn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jStatusSelected)
                    .addComponent(jStatusDrawn))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("File");

        jMenuLoad.setText("Load");
        jMenuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLoadActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuLoad);

        jMenuSave.setText("Save");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Shortcuts");

        jMenuHide.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, 0));
        jMenuHide.setText("Toggle drawn (Trace,Strace) ");
        jMenuHide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHideActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuHide);

        jMenuPlay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        jMenuPlay.setText("Play");
        jMenuPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlayActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuPlay);

        jMenuMode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, 0));
        jMenuMode.setText("Change Mode");
        jMenuMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuModeActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuMode);

        jMenuRecording.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, 0));
        jMenuRecording.setText("Toggle Recording");
        jMenuRecording.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRecordingActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuRecording);

        jMenuSetBackground.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, 0));
        jMenuSetBackground.setText("Set Background");
        jMenuSetBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSetBackgroundActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuSetBackground);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Export");

        jMenuExportTrace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, 0));
        jMenuExportTrace.setText("Trace");
        jMenuExportTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExportTraceActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuExportTrace);

        jMenuExportSTrace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        jMenuExportSTrace.setText("STrace");
        jMenuExportSTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExportSTraceActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuExportSTrace);

        jMenuExportTraceFromStrace.setText("TraceFromSTrace");
        jMenuExportTraceFromStrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExportTraceFromStraceActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuExportTraceFromStrace);

        jMenuExportSelected.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, 0));
        jMenuExportSelected.setText("Export Selected Trace&STrace&TFS");
        jMenuExportSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExportSelectedActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuExportSelected);

        jMenuExportAllTraces.setText("All Traces");
        jMenuExportAllTraces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExportAllTracesActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuExportAllTraces);

        jMenuAllSTraces.setText("All STraces");
        jMenuAllSTraces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAllSTracesActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuAllSTraces);

        jMenuAllTracesFromSTraces.setText("All TracesFromSTraces");
        jMenuAllTracesFromSTraces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAllTracesFromSTracesActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuAllTracesFromSTraces);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Graph");
        jMenu3.add(jSeparator1);

        jMenuChangePlotMode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, 0));
        jMenuChangePlotMode.setText("Change Plot Mode");
        jMenuChangePlotMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuChangePlotModeActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuChangePlotMode);
        jMenu3.add(jSeparator2);

        jMenuPDFReport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        jMenuPDFReport.setText("PDFReport");
        jMenuPDFReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPDFReportActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuPDFReport);

        jMenuBar1.add(jMenu3);

        jMenu5.setText("Configure");

        jMenuConfigureExportPath.setText("Export Path");
        jMenuConfigureExportPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuConfigureExportPathActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuConfigureExportPath);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Traces&Analyzers");

        jMenuStudiesName.setText("Stydies name ...");
        jMenuStudiesName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuStudiesNameActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuStudiesName);

        jMenuRemoveSelectedTrace.setText("Remove Selected Trace");
        jMenuRemoveSelectedTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRemoveSelectedTraceActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuRemoveSelectedTrace);

        jMenuRemoveSelectedAnalyzer.setText("Remove Selected Analyzer");
        jMenuRemoveSelectedAnalyzer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRemoveSelectedAnalyzerActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuRemoveSelectedAnalyzer);

        jMenuDefaultAnalyzers.setText("Edit Default Analyzers");
        jMenuDefaultAnalyzers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDefaultAnalyzersActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuDefaultAnalyzers);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static TraceAnalyzerParams inputAnalyzerParams(Component c) {

        Object[] pos = TraceAnalyzer.getTypes();

        String s = (String) JOptionPane.showInputDialog(
                c,
                "Choose analyzer type ...", "Params",
                JOptionPane.PLAIN_MESSAGE,
                null,
                pos,
                null);


        String ang = JOptionPane.showInputDialog(c, "Enter axe angle");

        //default icon, custom title
        int c_zero = JOptionPane.showConfirmDialog(
                c,
                "Must horizontal constant deplacement be zero ?",
                "Params",
                JOptionPane.YES_NO_OPTION);




        double varang = Double.parseDouble(ang) / 180 * Math.PI;

        boolean cz = c_zero == 0;


        return new TraceAnalyzerParams(TraceAnalyzer.typeFromString(s), varang, cz);

    }

    private void addAnalyzerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAnalyzerButtonActionPerformed

        TraceAnalyzerParams tap = TraceManagerUI.inputAnalyzerParams(this);
        tm.addTraceAnalyzer(tap.type, tap.angl, tap.c_zero);

    }//GEN-LAST:event_addAnalyzerButtonActionPerformed

    private void jMenuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLoadActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.setCurrentDirectory(new File(Options.getExportPath()));

        int returnVal = fc.showDialog(this, "Load");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.load(file.getPath());
            this.repaint();

        } else {
            System.out.println("Open command cancelled by user.");
        }
    }//GEN-LAST:event_jMenuLoadActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fc.setCurrentDirectory(new File(Options.getExportPath()));

        int returnVal = fc.showDialog(this, "Save");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.save(file.getPath());

        } else {
            System.out.println("Open command cancelled by user.");
        }
    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void jMenuHideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHideActionPerformed
        ip.tracehide();
    }//GEN-LAST:event_jMenuHideActionPerformed

    private void jMenuPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPlayActionPerformed
        ip.play();
    }//GEN-LAST:event_jMenuPlayActionPerformed

    private void jMenuModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuModeActionPerformed
        ip.changeMode();
    }//GEN-LAST:event_jMenuModeActionPerformed

    private void jMenuRecordingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRecordingActionPerformed
        ip.toggleRecording();
    }//GEN-LAST:event_jMenuRecordingActionPerformed

    private void jMenuExportTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExportTraceActionPerformed
        ip.exportTraces(this);
    }//GEN-LAST:event_jMenuExportTraceActionPerformed

    private void jMenuExportSTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExportSTraceActionPerformed
        ip.exportSTraces(this);
    }//GEN-LAST:event_jMenuExportSTraceActionPerformed

    private void jMenuExportTraceFromStraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExportTraceFromStraceActionPerformed
        ip.exportTraceFromStrace(this);
    }//GEN-LAST:event_jMenuExportTraceFromStraceActionPerformed

    private void jMenuConfigureExportPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuConfigureExportPathActionPerformed
        hmc.configureExportPath(this);
    }//GEN-LAST:event_jMenuConfigureExportPathActionPerformed

    private void jMenuExportAllTracesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExportAllTracesActionPerformed
        ip.exportAllTraces(this);
    }//GEN-LAST:event_jMenuExportAllTracesActionPerformed

    private void jMenuAllSTracesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAllSTracesActionPerformed
        ip.exportAllSTraces(this);
    }//GEN-LAST:event_jMenuAllSTracesActionPerformed

    private void jMenuAllTracesFromSTracesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAllTracesFromSTracesActionPerformed
        ip.exportAllTraceFromStrace(this);
    }//GEN-LAST:event_jMenuAllTracesFromSTracesActionPerformed

    private void jMenuSetBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSetBackgroundActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = fc.showDialog(this, "Load Image");

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            ip.setBackground(file.getPath());

        } else {
            System.out.println("Open command cancelled by user.");
        }
    }//GEN-LAST:event_jMenuSetBackgroundActionPerformed

    private void jMenuChangePlotModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuChangePlotModeActionPerformed
        ((PanelReport) this.jPanelReport).changePlotType();
    }//GEN-LAST:event_jMenuChangePlotModeActionPerformed

    private void jMenuExportSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExportSelectedActionPerformed
        ip.exportSelectedAll(this);
    }//GEN-LAST:event_jMenuExportSelectedActionPerformed

    private void jMenuPDFReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPDFReportActionPerformed
        TraceStudy ts = tm.getVTS().get(tm.getSelectedStudy());
        TraceAnalyzer ta = ts.getVTA().get(ts.getSelectedTraceAnalyzer());
        PDFreport psdf = new PDFreport(ta, ((PanelReport) this.jPanelReport).getPtype(), Options.getExportPath() + "/report.pdf");
    }//GEN-LAST:event_jMenuPDFReportActionPerformed

    private void jMenuStudiesNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuStudiesNameActionPerformed
        String res = JOptionPane.showInputDialog("Enter name :", tm.getStudyBaseName());
        if (!res.equals("")) {
            tm.setStudyBaseName(res);
        }
    }//GEN-LAST:event_jMenuStudiesNameActionPerformed

    private void jMenuRemoveSelectedTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRemoveSelectedTraceActionPerformed
        tm.removeTrace();
    }//GEN-LAST:event_jMenuRemoveSelectedTraceActionPerformed

    private void jMenuRemoveSelectedAnalyzerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRemoveSelectedAnalyzerActionPerformed
        tm.removeTraceAnalyzer();
    }//GEN-LAST:event_jMenuRemoveSelectedAnalyzerActionPerformed

    private void jMenuDefaultAnalyzersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDefaultAnalyzersActionPerformed
        this.dae.setVisible(true);
    }//GEN-LAST:event_jMenuDefaultAnalyzersActionPerformed

    private void jComboFigureSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboFigureSelectionItemStateChanged
        TraceStudy ts = tm.getVTS().get(tm.getSelectedStudy());
        TraceAnalyzer ta = ts.getVTA().get(ts.getSelectedTraceAnalyzer());
        ta.getTraceAnalyzerPlotter().setSelected(this.jComboFigureSelection.getSelectedIndex());
        jPanelReport.repaint();
    }//GEN-LAST:event_jComboFigureSelectionItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAnalyzerButton;
    private javax.swing.JComboBox jComboFigureSelection;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuItem jMenuAllSTraces;
    private javax.swing.JMenuItem jMenuAllTracesFromSTraces;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuChangePlotMode;
    private javax.swing.JMenuItem jMenuConfigureExportPath;
    private javax.swing.JMenuItem jMenuDefaultAnalyzers;
    private javax.swing.JMenuItem jMenuExportAllTraces;
    private javax.swing.JMenuItem jMenuExportSTrace;
    private javax.swing.JMenuItem jMenuExportSelected;
    private javax.swing.JMenuItem jMenuExportTrace;
    private javax.swing.JMenuItem jMenuExportTraceFromStrace;
    private javax.swing.JMenuItem jMenuHide;
    private javax.swing.JMenuItem jMenuLoad;
    private javax.swing.JMenuItem jMenuMode;
    private javax.swing.JMenuItem jMenuPDFReport;
    private javax.swing.JMenuItem jMenuPlay;
    private javax.swing.JMenuItem jMenuRecording;
    private javax.swing.JMenuItem jMenuRemoveSelectedAnalyzer;
    private javax.swing.JMenuItem jMenuRemoveSelectedTrace;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenuItem jMenuSetBackground;
    private javax.swing.JMenuItem jMenuStudiesName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel jStatusDrawn;
    private javax.swing.JLabel jStatusSelected;
    // End of variables declaration//GEN-END:variables

    private void setStatusSelected(TraceStudy ts, TraceAnalyzer ta) {
        this.jStatusSelected.setText(ts.toString() + " : "+ ta.toString());
    }

    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() == this.jList1) {
            if (this.jList1.getSelectedIndex() > -1) {
                this.tm.setSelectedStudy(this.jList1.getSelectedIndex());
                TraceStudy ts = tm.getVTS().get(tm.getSelectedStudy());
                this.jList2.setListData(ts.getVTA());
                this.jList2.setSelectedIndex(ts.getSelectedTraceAnalyzer());
                this.setStatusSelected(ts, ts.getTraceAnalyzer(ts.getSelectedTraceAnalyzer()));
            }
        } else if (e.getSource() == this.jList2) {
            if (this.jList2.getSelectedIndex() > -1) {
                TraceStudy ts = tm.getVTS().get(tm.getSelectedStudy());
                ts.setSelectedTraceAnalyzer(this.jList2.getSelectedIndex());
                AnalyzerPlotter ap = ts.getTraceAnalyzer(ts.getSelectedTraceAnalyzer()).getTraceAnalyzerPlotter();
                ((PanelReport) this.jPanelReport).setAnalyzerPlotter(ap);
                jComboFigureSelection.setModel(new DefaultComboBoxModel(ap.getFigures()));
                ((PanelReport) this.jPanelReport).plotReport();
                ((PanelReport) this.jPanelReport).repaint();
                this.setStatusSelected(ts, ts.getTraceAnalyzer(ts.getSelectedTraceAnalyzer()));
            }
        }
    }

    public void addedTraceStudy() {
        this.updateTraceList();
    }

    public void addedTraceAnalyzer() {
        this.updateTraceAnalyzerList();
    }

    public void removedTraceStudy() {
        this.updateTraceList();
    }

    public void removedTraceAnalyzer() {
        this.updateTraceAnalyzerList();
    }

    private void updateTraceList() {
        this.jList1.setListData(tm.getVTS());
        this.jList1.setSelectedIndex(tm.getSelectedStudy());
        TraceStudy ts = tm.getVTS().get(tm.getSelectedStudy());
        this.jList2.setListData(ts.getVTA());
        this.jList2.setSelectedIndex(ts.getSelectedTraceAnalyzer());
        this.setStatusSelected(ts, ts.getTraceAnalyzer(ts.getSelectedTraceAnalyzer()));
    }

    private void updateTraceAnalyzerList() {
        this.tm.setSelectedStudy(this.jList1.getSelectedIndex());
        TraceStudy ts = tm.getVTS().get(tm.getSelectedStudy());
        this.jList2.setListData(ts.getVTA());
        this.jList2.setSelectedIndex(ts.getSelectedTraceAnalyzer());
        AnalyzerPlotter ap = ts.getTraceAnalyzer(ts.getSelectedTraceAnalyzer()).getTraceAnalyzerPlotter();
        ((PanelReport) this.jPanelReport).setAnalyzerPlotter(ap);
        jComboFigureSelection.setModel(new DefaultComboBoxModel(ap.getFigures()));
        ((PanelReport) this.jPanelReport).plotReport();
        ((PanelReport) this.jPanelReport).repaint();
        this.setStatusSelected(ts, ts.getTraceAnalyzer(ts.getSelectedTraceAnalyzer()));

    }

    public void save(String path) {
        try {
            FileOutputStream fos = new FileOutputStream(path);

            // création d'un "flux objet" avec le flux fichier
            ObjectOutputStream oos = new ObjectOutputStream(fos);

            oos.writeObject(this.tm);
            // on vide le tampon
            oos.flush();


            oos.close();

            fos.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void load(String path) {
        try {
            FileInputStream fos = new FileInputStream(path);

            // création d'un "flux objet" avec le flux fichier
            ObjectInputStream oos = new ObjectInputStream(fos);

            this.tm = (TraceManager) oos.readObject();
            this.ip.setTM(tm);
            for (TraceStudy ts : tm.getVTS()) {
                for (TraceAnalyzer ta : ts.getVTA()) {
                    ta.computeAll();
                }
            }
            this.addedTraceStudy();
            this.tm.loadListener(this);


            oos.close();

            fos.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void addedDefaultAnalyzer() {
        dae.updateTraceList();
    }

    public void removedDefaultAnalyzer() {
        dae.updateTraceList();
    }
}
